// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement()) @map("user_id")
  email               String         @unique @map("user_email")
  password            String         @map("user_password")
  attributes          Json?          @map("user_attributes")
  sessions            Session[]
  outgoingConnections Connection[]   @relation("conn_outgoing_connections")
  incomingConnections Connection[]   @relation("conn_incoming_connections")
  groupMemberships    GroupMember[]
  posts               Post[]         @relation("post_author")
  receivedPosts       Post[]         @relation("post_recip_user")
  reactions           PostReaction[]
  uploads             File[]
}

model Session {
  id        String @unique @map("sess_id")
  userID    Int?   @map("sess_user_id")
  user      User?  @relation(fields: [userID], references: [id], onDelete: SetNull)
  content   String @map("sess_content") @db.MediumText
  flash     String @map("sess_flash") @db.MediumText
  updatedAt Int    @map("sess_updated_at")
  createdAt Int    @map("sess_created_at")
}

model Group {
  id         Int           @id @default(autoincrement()) @map("group_id")
  name       String        @map("group_name") @db.MediumText
  attributes Json?         @map("group_attributes")
  members    GroupMember[]
  posts      Post[]
}

model GroupMember {
  id         Int   @id @default(autoincrement()) @map("gm_id")
  userID     Int   @map("gm_member_id")
  user       User  @relation(fields: [userID], references: [id], onDelete: Cascade)
  groupID    Int   @map("gm_group_id")
  group      Group @relation(fields: [groupID], references: [id], onDelete: Cascade)
  attributes Json? @map("gm_attributes")
}

model Connection {
  id         Int   @id @default(autoincrement()) @map("conn_id")
  fromUserID Int   @map("conn_from_user_id")
  fromUser   User  @relation("conn_outgoing_connections", fields: [fromUserID], references: [id], onDelete: Cascade)
  toUserID   Int   @map("conn_to_user_id")
  toUser     User  @relation("conn_incoming_connections", fields: [toUserID], references: [id], onDelete: Cascade)
  attributes Json? @map("conn_attributes")
}

model Post {
  id               Int            @id @default(autoincrement()) @map("post_id")
  authorID         Int?           @map("post_author_id")
  author           User?          @relation("post_author", fields: [authorID], references: [id], onDelete: SetNull)
  created          DateTime       @default(now()) @map("post_created")
  updated          DateTime       @updatedAt @map("post_updated")
  content          String         @map("post_content") @db.LongText
  parentID         Int?           @map("post_parent_id")
  parent           Post?          @relation("post_children", fields: [parentID], references: [id], onDelete: Cascade)
  children         Post[]         @relation("post_children")
  recipientUserID  Int?           @map("post_recip_user_id")
  recipientUser    User?          @relation("post_recip_user", fields: [recipientUserID], references: [id], onDelete: Cascade)
  recipientGroupID Int?           @map("post_recip_group_id")
  recipientGroup   Group?         @relation(fields: [recipientGroupID], references: [id], onDelete: Cascade)
  reactions        PostReaction[]
  attributes       Json?          @map("post_attributes")
}

model PostReaction {
  id         Int    @id @default(autoincrement()) @map("pr_id")
  postID     Int    @map("pr_post_id")
  post       Post   @relation(fields: [postID], references: [id], onDelete: Cascade)
  reactorID  Int?   @map("pr_reactor_id")
  reactor    User?  @relation(fields: [reactorID], references: [id], onDelete: SetNull)
  name       String @map("pr_name") @db.MediumText
  value      Int?   @map("pr_value")
  attributes Json?  @map("pr_attributes")
}

model File {
  id         Int    @id @default(autoincrement()) @map("file_id")
  uploaderID Int?   @map("file_uploader_id")
  uploader   User?  @relation(fields: [uploaderID], references: [id], onDelete: SetNull)
  path       String @map("file_path") @db.Text
  size       Int    @map("file_size")
  attributes Json?  @map("file_attributes")
}
